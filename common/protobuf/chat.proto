syntax = "proto3";
package chat;

option optimize_for = LITE_RUNTIME;

enum ServerType {
    TYPE_AGGREGATOR = 0;
    TYPE_SERVER = 1;
}

enum StatusCode {
    STATUS_UNKNOWN = 0;
    STATUS_SUCCESS = 1;
    STATUS_FAILURE = 2;
    STATUS_UNAUTHORIZED = 3;
    STATUS_NOT_FOUND = 4;
}

message Status {
    StatusCode code = 1;
    optional string message = 2;
}

enum UserRights {
    REGULAR = 0;
    MODERATOR = 1;
    OWNER = 2;
    ADMIN = 3;
}

message UserInfo {
    int32 user_id = 1;
    string user_name = 2;
    optional UserRights user_room_rights = 3;
}

message MessageInfo {
    UserInfo from = 1;
    string message = 2;
    int64 timestamp = 3;
}

message RoomInfo {
    int32 room_id = 1;
    string room_name = 2;
    optional UserInfo owner = 3;
}

message ServerNodeInfo {
    string host = 1;
}

message GenericError {
    Status status = 1;
}

message ServerHello {
    ServerType type = 1;
    int32 protocol_version = 2;
}

message InitialAuthRequest {
    string username = 1;
}
message InitialAuthResponse {
    Status status = 1;
    optional string salt = 2;
}
message AuthRequest {
    string hash = 1;
    optional string password = 2;
    optional string salt = 3;
}
message AuthResponse {
    Status status = 1;
    repeated RoomInfo rooms = 2;
}

message InitialRegisterRequest {
    string username = 1;
}
message InitialRegisterResponse { 
    Status status = 1;
}
message RegisterRequest {
    string salt = 1;
    string hash = 2;
}
message RegisterResponse {
    Status status = 1;
}

message LogoutRequest {

}
message LogoutResponse {
    Status status = 1;
}

message SendMessageRequest {
    string message = 1;
}
message SendMessageResponse {
    Status status = 1;
}

message JoinRoomRequest {
    int32 room_id = 1;
}
message JoinRoomResponse {
    Status status = 1;
    repeated UserInfo users = 2;
}
message UserJoinedRoom {
    UserInfo user = 1;
}

message LeaveRoomRequest {
}
message LeaveRoomResponse {
    Status status = 1;
}
message UserLeftRoom {
    UserInfo user = 1;
}

message CreateRoomRequest {
    string room_name = 1;
}
message CreateRoomResponse {
    Status status = 1;
}

message RoomMessage {
    MessageInfo message = 1;
}

message GetMessagesRequest{
    int32 limit = 1;
    int64 offset_ts = 2;
}
message GetMessagesResponse{
    Status status = 1;
    repeated MessageInfo message = 2;
}


message RegisterServerRequest {
    string host = 1;
}
message RegisterServerResponse {
    Status status = 1;
}

message GetServerNodesRequest {
}
message GetServerNodesResponse {
    Status status = 1;
    repeated ServerNodeInfo servers = 2;
}

message ServerAdded {
    ServerNodeInfo server = 1;
}
message ServerRemoved {
    ServerNodeInfo server = 1;
}

message NewRoomCreated {
    RoomInfo room = 1;
}

message Envelope {
    optional uint64 request_id = 1;

    oneof payload {
        ServerHello server_hello = 2;
        InitialAuthRequest initial_auth_request = 3;
        InitialAuthResponse initial_auth_response = 4;
        AuthRequest auth_request = 5;
        AuthResponse auth_response = 6;
        InitialRegisterRequest initial_register_request = 7;
        InitialRegisterResponse initial_register_response = 8;
        RegisterRequest register_request = 9;
        RegisterResponse register_response = 10;
        LogoutRequest logout_request = 11;
        LogoutResponse logout_response = 12;
        SendMessageRequest send_message_request = 13;
        SendMessageResponse send_message_response = 14;
        JoinRoomRequest join_room_request = 15;
        JoinRoomResponse join_room_response = 16;
        LeaveRoomRequest leave_room_request = 17;
        LeaveRoomResponse leave_room_response = 18;
        CreateRoomRequest create_room_request = 19;
        CreateRoomResponse create_room_response = 20;
        RoomMessage room_message = 21;
        GetMessagesRequest get_messages_request = 22;
        GetMessagesResponse get_messages_response = 23;
        GenericError generic_error = 24;
        UserJoinedRoom user_joined = 25;
        UserLeftRoom user_left = 26;
        NewRoomCreated new_room_created = 27;
        RegisterServerRequest register_server_request = 28;
        RegisterServerResponse register_server_response = 29;
        GetServerNodesRequest get_servers_request = 30;
        GetServerNodesResponse get_servers_response = 31;
        ServerAdded server_added = 32;
        ServerRemoved server_removed = 33;
    }
}
