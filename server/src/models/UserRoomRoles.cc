/**
 *
 *  UserRoomRoles.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include <server/models/UserRoomRoles.h>
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::drogon_test;

const std::string UserRoomRoles::Cols::_user_id = "\"user_id\"";
const std::string UserRoomRoles::Cols::_room_id = "\"room_id\"";
const std::string UserRoomRoles::Cols::_role_type = "\"role_type\"";
const std::vector<std::string> UserRoomRoles::primaryKeyName = {"user_id","room_id"};
const bool UserRoomRoles::hasPrimaryKey = true;
const std::string UserRoomRoles::tableName = "\"user_room_roles\"";

const std::vector<typename UserRoomRoles::MetaData> UserRoomRoles::metaData_={
{"user_id","int32_t","integer",4,0,1,1},
{"room_id","int32_t","integer",4,0,1,1},
{"role_type","std::string","USER-DEFINED",0,0,0,1}
};
const std::string &UserRoomRoles::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
UserRoomRoles::UserRoomRoles(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["user_id"].isNull())
        {
            userId_=std::make_shared<int32_t>(r["user_id"].as<int32_t>());
        }
        if(!r["room_id"].isNull())
        {
            roomId_=std::make_shared<int32_t>(r["room_id"].as<int32_t>());
        }
        if(!r["role_type"].isNull())
        {
            roleType_=std::make_shared<std::string>(r["role_type"].as<std::string>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 3 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            userId_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            roomId_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            roleType_=std::make_shared<std::string>(r[index].as<std::string>());
        }
    }

}

UserRoomRoles::UserRoomRoles(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 3)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            userId_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            roomId_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[1]].asInt64());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            roleType_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
}

UserRoomRoles::UserRoomRoles(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("user_id"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["user_id"].isNull())
        {
            userId_=std::make_shared<int32_t>((int32_t)pJson["user_id"].asInt64());
        }
    }
    if(pJson.isMember("room_id"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["room_id"].isNull())
        {
            roomId_=std::make_shared<int32_t>((int32_t)pJson["room_id"].asInt64());
        }
    }
    if(pJson.isMember("role_type"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["role_type"].isNull())
        {
            roleType_=std::make_shared<std::string>(pJson["role_type"].asString());
        }
    }
}

void UserRoomRoles::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 3)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            userId_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            roomId_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[1]].asInt64());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            roleType_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
}

void UserRoomRoles::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("user_id"))
    {
        if(!pJson["user_id"].isNull())
        {
            userId_=std::make_shared<int32_t>((int32_t)pJson["user_id"].asInt64());
        }
    }
    if(pJson.isMember("room_id"))
    {
        if(!pJson["room_id"].isNull())
        {
            roomId_=std::make_shared<int32_t>((int32_t)pJson["room_id"].asInt64());
        }
    }
    if(pJson.isMember("role_type"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["role_type"].isNull())
        {
            roleType_=std::make_shared<std::string>(pJson["role_type"].asString());
        }
    }
}

const int32_t &UserRoomRoles::getValueOfUserId() const noexcept
{
    static const int32_t defaultValue = int32_t();
    if(userId_)
        return *userId_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &UserRoomRoles::getUserId() const noexcept
{
    return userId_;
}
void UserRoomRoles::setUserId(const int32_t &pUserId) noexcept
{
    userId_ = std::make_shared<int32_t>(pUserId);
    dirtyFlag_[0] = true;
}

const int32_t &UserRoomRoles::getValueOfRoomId() const noexcept
{
    static const int32_t defaultValue = int32_t();
    if(roomId_)
        return *roomId_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &UserRoomRoles::getRoomId() const noexcept
{
    return roomId_;
}
void UserRoomRoles::setRoomId(const int32_t &pRoomId) noexcept
{
    roomId_ = std::make_shared<int32_t>(pRoomId);
    dirtyFlag_[1] = true;
}

const std::string &UserRoomRoles::getValueOfRoleType() const noexcept
{
    static const std::string defaultValue = std::string();
    if(roleType_)
        return *roleType_;
    return defaultValue;
}
const std::shared_ptr<std::string> &UserRoomRoles::getRoleType() const noexcept
{
    return roleType_;
}
void UserRoomRoles::setRoleType(const std::string &pRoleType) noexcept
{
    roleType_ = std::make_shared<std::string>(pRoleType);
    dirtyFlag_[2] = true;
}
void UserRoomRoles::setRoleType(std::string &&pRoleType) noexcept
{
    roleType_ = std::make_shared<std::string>(std::move(pRoleType));
    dirtyFlag_[2] = true;
}

void UserRoomRoles::updateId(const uint64_t id)
{
}
typename UserRoomRoles::PrimaryKeyType UserRoomRoles::getPrimaryKey() const
{
    return std::make_tuple(*userId_,*roomId_);
}

const std::vector<std::string> &UserRoomRoles::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "user_id",
        "room_id",
        "role_type"
    };
    return inCols;
}

void UserRoomRoles::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[0])
    {
        if(getUserId())
        {
            binder << getValueOfUserId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[1])
    {
        if(getRoomId())
        {
            binder << getValueOfRoomId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getRoleType())
        {
            binder << getValueOfRoleType();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> UserRoomRoles::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[0])
    {
        ret.push_back(getColumnName(0));
    }
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    return ret;
}

void UserRoomRoles::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[0])
    {
        if(getUserId())
        {
            binder << getValueOfUserId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[1])
    {
        if(getRoomId())
        {
            binder << getValueOfRoomId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getRoleType())
        {
            binder << getValueOfRoleType();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value UserRoomRoles::toJson() const
{
    Json::Value ret;
    if(getUserId())
    {
        ret["user_id"]=getValueOfUserId();
    }
    else
    {
        ret["user_id"]=Json::Value();
    }
    if(getRoomId())
    {
        ret["room_id"]=getValueOfRoomId();
    }
    else
    {
        ret["room_id"]=Json::Value();
    }
    if(getRoleType())
    {
        ret["role_type"]=getValueOfRoleType();
    }
    else
    {
        ret["role_type"]=Json::Value();
    }
    return ret;
}

Json::Value UserRoomRoles::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 3)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getUserId())
            {
                ret[pMasqueradingVector[0]]=getValueOfUserId();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getRoomId())
            {
                ret[pMasqueradingVector[1]]=getValueOfRoomId();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getRoleType())
            {
                ret[pMasqueradingVector[2]]=getValueOfRoleType();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getUserId())
    {
        ret["user_id"]=getValueOfUserId();
    }
    else
    {
        ret["user_id"]=Json::Value();
    }
    if(getRoomId())
    {
        ret["room_id"]=getValueOfRoomId();
    }
    else
    {
        ret["room_id"]=Json::Value();
    }
    if(getRoleType())
    {
        ret["role_type"]=getValueOfRoleType();
    }
    else
    {
        ret["role_type"]=Json::Value();
    }
    return ret;
}

bool UserRoomRoles::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("user_id"))
    {
        if(!validJsonOfField(0, "user_id", pJson["user_id"], err, true))
            return false;
    }
    else
    {
        err="The user_id column cannot be null";
        return false;
    }
    if(pJson.isMember("room_id"))
    {
        if(!validJsonOfField(1, "room_id", pJson["room_id"], err, true))
            return false;
    }
    else
    {
        err="The room_id column cannot be null";
        return false;
    }
    if(pJson.isMember("role_type"))
    {
        if(!validJsonOfField(2, "role_type", pJson["role_type"], err, true))
            return false;
    }
    return true;
}
bool UserRoomRoles::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                                       const std::vector<std::string> &pMasqueradingVector,
                                                       std::string &err)
{
    if(pMasqueradingVector.size() != 3)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty())
      {
          if(pJson.isMember(pMasqueradingVector[0]))
          {
              if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[0] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[1].empty())
      {
          if(pJson.isMember(pMasqueradingVector[1]))
          {
              if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[1] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[2].empty())
      {
          if(pJson.isMember(pMasqueradingVector[2]))
          {
              if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                  return false;
          }
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool UserRoomRoles::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("user_id"))
    {
        if(!validJsonOfField(0, "user_id", pJson["user_id"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("room_id"))
    {
        if(!validJsonOfField(1, "room_id", pJson["room_id"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("role_type"))
    {
        if(!validJsonOfField(2, "role_type", pJson["role_type"], err, false))
            return false;
    }
    return true;
}
bool UserRoomRoles::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                                     const std::vector<std::string> &pMasqueradingVector,
                                                     std::string &err)
{
    if(pMasqueradingVector.size() != 3)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
      {
          if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
              return false;
      }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
      if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
      {
          if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
              return false;
      }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
      if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
      {
          if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
              return false;
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool UserRoomRoles::validJsonOfField(size_t index,
                                     const std::string &fieldName,
                                     const Json::Value &pJson,
                                     std::string &err,
                                     bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 2:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        default:
            err="Internal error in the server";
            return false;
    }
    return true;
}
