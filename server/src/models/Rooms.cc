/**
 *
 *  Rooms.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include <server/models/Rooms.h>
#include <server/models/Messages.h>
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::drogon_test;

const std::string Rooms::Cols::_room_id = "\"room_id\"";
const std::string Rooms::Cols::_room_name = "\"room_name\"";
const std::string Rooms::Cols::_created_at = "\"created_at\"";
const std::string Rooms::Cols::_owner_id = "\"owner_id\"";
const std::string Rooms::primaryKeyName = "room_id";
const bool Rooms::hasPrimaryKey = true;
const std::string Rooms::tableName = "\"rooms\"";

const std::vector<typename Rooms::MetaData> Rooms::metaData_={
{"room_id","int32_t","integer",4,1,1,1},
{"room_name","std::string","character varying",255,0,0,1},
{"created_at","::trantor::Date","timestamp with time zone",0,0,0,0},
{"owner_id","int32_t","integer",4,0,0,0}
};
const std::string &Rooms::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
Rooms::Rooms(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["room_id"].isNull())
        {
            roomId_=std::make_shared<int32_t>(r["room_id"].as<int32_t>());
        }
        if(!r["room_name"].isNull())
        {
            roomName_=std::make_shared<std::string>(r["room_name"].as<std::string>());
        }
        if(!r["created_at"].isNull())
        {
            auto timeStr = r["created_at"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createdAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        if(!r["owner_id"].isNull())
        {
            ownerId_=std::make_shared<int32_t>(r["owner_id"].as<int32_t>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 4 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            roomId_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            roomName_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createdAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            ownerId_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
    }

}

Rooms::Rooms(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 4)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            roomId_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            roomName_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[2]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createdAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            ownerId_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[3]].asInt64());
        }
    }
}

Rooms::Rooms(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("room_id"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["room_id"].isNull())
        {
            roomId_=std::make_shared<int32_t>((int32_t)pJson["room_id"].asInt64());
        }
    }
    if(pJson.isMember("room_name"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["room_name"].isNull())
        {
            roomName_=std::make_shared<std::string>(pJson["room_name"].asString());
        }
    }
    if(pJson.isMember("created_at"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["created_at"].isNull())
        {
            auto timeStr = pJson["created_at"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createdAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("owner_id"))
    {
        dirtyFlag_[3]=true;
        if(!pJson["owner_id"].isNull())
        {
            ownerId_=std::make_shared<int32_t>((int32_t)pJson["owner_id"].asInt64());
        }
    }
}

void Rooms::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 4)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            roomId_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            roomName_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[2]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createdAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            ownerId_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[3]].asInt64());
        }
    }
}

void Rooms::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("room_id"))
    {
        if(!pJson["room_id"].isNull())
        {
            roomId_=std::make_shared<int32_t>((int32_t)pJson["room_id"].asInt64());
        }
    }
    if(pJson.isMember("room_name"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["room_name"].isNull())
        {
            roomName_=std::make_shared<std::string>(pJson["room_name"].asString());
        }
    }
    if(pJson.isMember("created_at"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["created_at"].isNull())
        {
            auto timeStr = pJson["created_at"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createdAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("owner_id"))
    {
        dirtyFlag_[3] = true;
        if(!pJson["owner_id"].isNull())
        {
            ownerId_=std::make_shared<int32_t>((int32_t)pJson["owner_id"].asInt64());
        }
    }
}

const int32_t &Rooms::getValueOfRoomId() const noexcept
{
    static const int32_t defaultValue = int32_t();
    if(roomId_)
        return *roomId_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &Rooms::getRoomId() const noexcept
{
    return roomId_;
}
void Rooms::setRoomId(const int32_t &pRoomId) noexcept
{
    roomId_ = std::make_shared<int32_t>(pRoomId);
    dirtyFlag_[0] = true;
}
const typename Rooms::PrimaryKeyType & Rooms::getPrimaryKey() const
{
    assert(roomId_);
    return *roomId_;
}

const std::string &Rooms::getValueOfRoomName() const noexcept
{
    static const std::string defaultValue = std::string();
    if(roomName_)
        return *roomName_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Rooms::getRoomName() const noexcept
{
    return roomName_;
}
void Rooms::setRoomName(const std::string &pRoomName) noexcept
{
    roomName_ = std::make_shared<std::string>(pRoomName);
    dirtyFlag_[1] = true;
}
void Rooms::setRoomName(std::string &&pRoomName) noexcept
{
    roomName_ = std::make_shared<std::string>(std::move(pRoomName));
    dirtyFlag_[1] = true;
}

const ::trantor::Date &Rooms::getValueOfCreatedAt() const noexcept
{
    static const ::trantor::Date defaultValue = ::trantor::Date();
    if(createdAt_)
        return *createdAt_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &Rooms::getCreatedAt() const noexcept
{
    return createdAt_;
}
void Rooms::setCreatedAt(const ::trantor::Date &pCreatedAt) noexcept
{
    createdAt_ = std::make_shared<::trantor::Date>(pCreatedAt);
    dirtyFlag_[2] = true;
}
void Rooms::setCreatedAtToNull() noexcept
{
    createdAt_.reset();
    dirtyFlag_[2] = true;
}

const int32_t &Rooms::getValueOfOwnerId() const noexcept
{
    static const int32_t defaultValue = int32_t();
    if(ownerId_)
        return *ownerId_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &Rooms::getOwnerId() const noexcept
{
    return ownerId_;
}
void Rooms::setOwnerId(const int32_t &pOwnerId) noexcept
{
    ownerId_ = std::make_shared<int32_t>(pOwnerId);
    dirtyFlag_[3] = true;
}
void Rooms::setOwnerIdToNull() noexcept
{
    ownerId_.reset();
    dirtyFlag_[3] = true;
}

void Rooms::updateId(const uint64_t id)
{
}

const std::vector<std::string> &Rooms::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "room_name",
        "created_at",
        "owner_id"
    };
    return inCols;
}

void Rooms::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getRoomName())
        {
            binder << getValueOfRoomName();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getCreatedAt())
        {
            binder << getValueOfCreatedAt();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getOwnerId())
        {
            binder << getValueOfOwnerId();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> Rooms::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    if(dirtyFlag_[3])
    {
        ret.push_back(getColumnName(3));
    }
    return ret;
}

void Rooms::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getRoomName())
        {
            binder << getValueOfRoomName();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getCreatedAt())
        {
            binder << getValueOfCreatedAt();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getOwnerId())
        {
            binder << getValueOfOwnerId();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value Rooms::toJson() const
{
    Json::Value ret;
    if(getRoomId())
    {
        ret["room_id"]=getValueOfRoomId();
    }
    else
    {
        ret["room_id"]=Json::Value();
    }
    if(getRoomName())
    {
        ret["room_name"]=getValueOfRoomName();
    }
    else
    {
        ret["room_name"]=Json::Value();
    }
    if(getCreatedAt())
    {
        ret["created_at"]=getCreatedAt()->toDbStringLocal();
    }
    else
    {
        ret["created_at"]=Json::Value();
    }
    if(getOwnerId())
    {
        ret["owner_id"]=getValueOfOwnerId();
    }
    else
    {
        ret["owner_id"]=Json::Value();
    }
    return ret;
}

Json::Value Rooms::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 4)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getRoomId())
            {
                ret[pMasqueradingVector[0]]=getValueOfRoomId();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getRoomName())
            {
                ret[pMasqueradingVector[1]]=getValueOfRoomName();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getCreatedAt())
            {
                ret[pMasqueradingVector[2]]=getCreatedAt()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getOwnerId())
            {
                ret[pMasqueradingVector[3]]=getValueOfOwnerId();
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getRoomId())
    {
        ret["room_id"]=getValueOfRoomId();
    }
    else
    {
        ret["room_id"]=Json::Value();
    }
    if(getRoomName())
    {
        ret["room_name"]=getValueOfRoomName();
    }
    else
    {
        ret["room_name"]=Json::Value();
    }
    if(getCreatedAt())
    {
        ret["created_at"]=getCreatedAt()->toDbStringLocal();
    }
    else
    {
        ret["created_at"]=Json::Value();
    }
    if(getOwnerId())
    {
        ret["owner_id"]=getValueOfOwnerId();
    }
    else
    {
        ret["owner_id"]=Json::Value();
    }
    return ret;
}

bool Rooms::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("room_id"))
    {
        if(!validJsonOfField(0, "room_id", pJson["room_id"], err, true))
            return false;
    }
    if(pJson.isMember("room_name"))
    {
        if(!validJsonOfField(1, "room_name", pJson["room_name"], err, true))
            return false;
    }
    else
    {
        err="The room_name column cannot be null";
        return false;
    }
    if(pJson.isMember("created_at"))
    {
        if(!validJsonOfField(2, "created_at", pJson["created_at"], err, true))
            return false;
    }
    if(pJson.isMember("owner_id"))
    {
        if(!validJsonOfField(3, "owner_id", pJson["owner_id"], err, true))
            return false;
    }
    return true;
}
bool Rooms::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                               const std::vector<std::string> &pMasqueradingVector,
                                               std::string &err)
{
    if(pMasqueradingVector.size() != 4)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty())
      {
          if(pJson.isMember(pMasqueradingVector[0]))
          {
              if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[1].empty())
      {
          if(pJson.isMember(pMasqueradingVector[1]))
          {
              if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[1] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[2].empty())
      {
          if(pJson.isMember(pMasqueradingVector[2]))
          {
              if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[3].empty())
      {
          if(pJson.isMember(pMasqueradingVector[3]))
          {
              if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                  return false;
          }
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Rooms::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("room_id"))
    {
        if(!validJsonOfField(0, "room_id", pJson["room_id"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("room_name"))
    {
        if(!validJsonOfField(1, "room_name", pJson["room_name"], err, false))
            return false;
    }
    if(pJson.isMember("created_at"))
    {
        if(!validJsonOfField(2, "created_at", pJson["created_at"], err, false))
            return false;
    }
    if(pJson.isMember("owner_id"))
    {
        if(!validJsonOfField(3, "owner_id", pJson["owner_id"], err, false))
            return false;
    }
    return true;
}
bool Rooms::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                             const std::vector<std::string> &pMasqueradingVector,
                                             std::string &err)
{
    if(pMasqueradingVector.size() != 4)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
      {
          if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
              return false;
      }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
      if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
      {
          if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
              return false;
      }
      if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
      {
          if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
              return false;
      }
      if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
      {
          if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
              return false;
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Rooms::validJsonOfField(size_t index,
                             const std::string &fieldName,
                             const Json::Value &pJson,
                             std::string &err,
                             bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(isForCreation)
            {
                err="The automatic primary key cannot be set";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            if(pJson.isString() && std::strlen(pJson.asCString()) > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;
            }

            break;
        case 2:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 3:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        default:
            err="Internal error in the server";
            return false;
    }
    return true;
}
std::vector<Messages> Rooms::getMessages(const DbClientPtr &clientPtr) const {
    static const std::string sql = "select * from messages where room_id = $1";
    Result r(nullptr);
    {
        auto binder = *clientPtr << sql;
        binder << *roomId_ << Mode::Blocking >>
            [&r](const Result &result) { r = result; };
        binder.exec();
    }
    std::vector<Messages> ret;
    ret.reserve(r.size());
    for (auto const &row : r)
    {
        ret.emplace_back(Messages(row));
    }
    return ret;
}

void Rooms::getMessages(const DbClientPtr &clientPtr,
                        const std::function<void(std::vector<Messages>)> &rcb,
                        const ExceptionCallback &ecb) const
{
    static const std::string sql = "select * from messages where room_id = $1";
    *clientPtr << sql
               << *roomId_
               >> [rcb = std::move(rcb)](const Result &r){
                   std::vector<Messages> ret;
                   ret.reserve(r.size());
                   for (auto const &row : r)
                   {
                       ret.emplace_back(Messages(row));
                   }
                   rcb(ret);
               }
               >> ecb;
}
