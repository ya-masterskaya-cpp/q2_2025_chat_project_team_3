/**
 *
 *  Users.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include <server/models/Users.h>
#include <server/models/Messages.h>
#include <server/models/Rooms.h>
#include <server/models/UserRoomRoles.h>
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::drogon_test;

const std::string Users::Cols::_user_id = "\"user_id\"";
const std::string Users::Cols::_username = "\"username\"";
const std::string Users::Cols::_hash_password = "\"hash_password\"";
const std::string Users::Cols::_salt = "\"salt\"";
const std::string Users::Cols::_is_admin = "\"is_admin\"";
const std::string Users::Cols::_created_at = "\"created_at\"";
const std::string Users::primaryKeyName = "user_id";
const bool Users::hasPrimaryKey = true;
const std::string Users::tableName = "\"users\"";

const std::vector<typename Users::MetaData> Users::metaData_={
{"user_id","int32_t","integer",4,1,1,1},
{"username","std::string","character varying",255,0,0,1},
{"hash_password","std::string","character varying",255,0,0,1},
{"salt","std::string","character varying",255,0,0,0},
{"is_admin","bool","boolean",1,0,0,1},
{"created_at","int64_t","bigint",8,0,0,0}
};
const std::string &Users::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
Users::Users(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["user_id"].isNull())
        {
            userId_=std::make_shared<int32_t>(r["user_id"].as<int32_t>());
        }
        if(!r["username"].isNull())
        {
            username_=std::make_shared<std::string>(r["username"].as<std::string>());
        }
        if(!r["hash_password"].isNull())
        {
            hashPassword_=std::make_shared<std::string>(r["hash_password"].as<std::string>());
        }
        if(!r["salt"].isNull())
        {
            salt_=std::make_shared<std::string>(r["salt"].as<std::string>());
        }
        if(!r["is_admin"].isNull())
        {
            isAdmin_=std::make_shared<bool>(r["is_admin"].as<bool>());
        }
        if(!r["created_at"].isNull())
        {
            createdAt_=std::make_shared<int64_t>(r["created_at"].as<int64_t>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 6 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            userId_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            username_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            hashPassword_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            salt_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 4;
        if(!r[index].isNull())
        {
            isAdmin_=std::make_shared<bool>(r[index].as<bool>());
        }
        index = offset + 5;
        if(!r[index].isNull())
        {
            createdAt_=std::make_shared<int64_t>(r[index].as<int64_t>());
        }
    }

}

Users::Users(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 6)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            userId_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            username_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            hashPassword_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            salt_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            isAdmin_=std::make_shared<bool>(pJson[pMasqueradingVector[4]].asBool());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            createdAt_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[5]].asInt64());
        }
    }
}

Users::Users(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("user_id"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["user_id"].isNull())
        {
            userId_=std::make_shared<int32_t>((int32_t)pJson["user_id"].asInt64());
        }
    }
    if(pJson.isMember("username"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["username"].isNull())
        {
            username_=std::make_shared<std::string>(pJson["username"].asString());
        }
    }
    if(pJson.isMember("hash_password"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["hash_password"].isNull())
        {
            hashPassword_=std::make_shared<std::string>(pJson["hash_password"].asString());
        }
    }
    if(pJson.isMember("salt"))
    {
        dirtyFlag_[3]=true;
        if(!pJson["salt"].isNull())
        {
            salt_=std::make_shared<std::string>(pJson["salt"].asString());
        }
    }
    if(pJson.isMember("is_admin"))
    {
        dirtyFlag_[4]=true;
        if(!pJson["is_admin"].isNull())
        {
            isAdmin_=std::make_shared<bool>(pJson["is_admin"].asBool());
        }
    }
    if(pJson.isMember("created_at"))
    {
        dirtyFlag_[5]=true;
        if(!pJson["created_at"].isNull())
        {
            createdAt_=std::make_shared<int64_t>((int64_t)pJson["created_at"].asInt64());
        }
    }
}

void Users::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 6)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            userId_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            username_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            hashPassword_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            salt_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            isAdmin_=std::make_shared<bool>(pJson[pMasqueradingVector[4]].asBool());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            createdAt_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[5]].asInt64());
        }
    }
}

void Users::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("user_id"))
    {
        if(!pJson["user_id"].isNull())
        {
            userId_=std::make_shared<int32_t>((int32_t)pJson["user_id"].asInt64());
        }
    }
    if(pJson.isMember("username"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["username"].isNull())
        {
            username_=std::make_shared<std::string>(pJson["username"].asString());
        }
    }
    if(pJson.isMember("hash_password"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["hash_password"].isNull())
        {
            hashPassword_=std::make_shared<std::string>(pJson["hash_password"].asString());
        }
    }
    if(pJson.isMember("salt"))
    {
        dirtyFlag_[3] = true;
        if(!pJson["salt"].isNull())
        {
            salt_=std::make_shared<std::string>(pJson["salt"].asString());
        }
    }
    if(pJson.isMember("is_admin"))
    {
        dirtyFlag_[4] = true;
        if(!pJson["is_admin"].isNull())
        {
            isAdmin_=std::make_shared<bool>(pJson["is_admin"].asBool());
        }
    }
    if(pJson.isMember("created_at"))
    {
        dirtyFlag_[5] = true;
        if(!pJson["created_at"].isNull())
        {
            createdAt_=std::make_shared<int64_t>((int64_t)pJson["created_at"].asInt64());
        }
    }
}

const int32_t &Users::getValueOfUserId() const noexcept
{
    static const int32_t defaultValue = int32_t();
    if(userId_)
        return *userId_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &Users::getUserId() const noexcept
{
    return userId_;
}
void Users::setUserId(const int32_t &pUserId) noexcept
{
    userId_ = std::make_shared<int32_t>(pUserId);
    dirtyFlag_[0] = true;
}
const typename Users::PrimaryKeyType & Users::getPrimaryKey() const
{
    assert(userId_);
    return *userId_;
}

const std::string &Users::getValueOfUsername() const noexcept
{
    static const std::string defaultValue = std::string();
    if(username_)
        return *username_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Users::getUsername() const noexcept
{
    return username_;
}
void Users::setUsername(const std::string &pUsername) noexcept
{
    username_ = std::make_shared<std::string>(pUsername);
    dirtyFlag_[1] = true;
}
void Users::setUsername(std::string &&pUsername) noexcept
{
    username_ = std::make_shared<std::string>(std::move(pUsername));
    dirtyFlag_[1] = true;
}

const std::string &Users::getValueOfHashPassword() const noexcept
{
    static const std::string defaultValue = std::string();
    if(hashPassword_)
        return *hashPassword_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Users::getHashPassword() const noexcept
{
    return hashPassword_;
}
void Users::setHashPassword(const std::string &pHashPassword) noexcept
{
    hashPassword_ = std::make_shared<std::string>(pHashPassword);
    dirtyFlag_[2] = true;
}
void Users::setHashPassword(std::string &&pHashPassword) noexcept
{
    hashPassword_ = std::make_shared<std::string>(std::move(pHashPassword));
    dirtyFlag_[2] = true;
}

const std::string &Users::getValueOfSalt() const noexcept
{
    static const std::string defaultValue = std::string();
    if(salt_)
        return *salt_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Users::getSalt() const noexcept
{
    return salt_;
}
void Users::setSalt(const std::string &pSalt) noexcept
{
    salt_ = std::make_shared<std::string>(pSalt);
    dirtyFlag_[3] = true;
}
void Users::setSalt(std::string &&pSalt) noexcept
{
    salt_ = std::make_shared<std::string>(std::move(pSalt));
    dirtyFlag_[3] = true;
}
void Users::setSaltToNull() noexcept
{
    salt_.reset();
    dirtyFlag_[3] = true;
}

const bool &Users::getValueOfIsAdmin() const noexcept
{
    static const bool defaultValue = bool();
    if(isAdmin_)
        return *isAdmin_;
    return defaultValue;
}
const std::shared_ptr<bool> &Users::getIsAdmin() const noexcept
{
    return isAdmin_;
}
void Users::setIsAdmin(const bool &pIsAdmin) noexcept
{
    isAdmin_ = std::make_shared<bool>(pIsAdmin);
    dirtyFlag_[4] = true;
}

const int64_t &Users::getValueOfCreatedAt() const noexcept
{
    static const int64_t defaultValue = int64_t();
    if(createdAt_)
        return *createdAt_;
    return defaultValue;
}
const std::shared_ptr<int64_t> &Users::getCreatedAt() const noexcept
{
    return createdAt_;
}
void Users::setCreatedAt(const int64_t &pCreatedAt) noexcept
{
    createdAt_ = std::make_shared<int64_t>(pCreatedAt);
    dirtyFlag_[5] = true;
}
void Users::setCreatedAtToNull() noexcept
{
    createdAt_.reset();
    dirtyFlag_[5] = true;
}

void Users::updateId(const uint64_t id)
{
}

const std::vector<std::string> &Users::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "username",
        "hash_password",
        "salt",
        "is_admin",
        "created_at"
    };
    return inCols;
}

void Users::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getUsername())
        {
            binder << getValueOfUsername();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getHashPassword())
        {
            binder << getValueOfHashPassword();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getSalt())
        {
            binder << getValueOfSalt();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getIsAdmin())
        {
            binder << getValueOfIsAdmin();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getCreatedAt())
        {
            binder << getValueOfCreatedAt();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> Users::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    if(dirtyFlag_[3])
    {
        ret.push_back(getColumnName(3));
    }
    if(dirtyFlag_[4])
    {
        ret.push_back(getColumnName(4));
    }
    if(dirtyFlag_[5])
    {
        ret.push_back(getColumnName(5));
    }
    return ret;
}

void Users::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getUsername())
        {
            binder << getValueOfUsername();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getHashPassword())
        {
            binder << getValueOfHashPassword();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getSalt())
        {
            binder << getValueOfSalt();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getIsAdmin())
        {
            binder << getValueOfIsAdmin();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getCreatedAt())
        {
            binder << getValueOfCreatedAt();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value Users::toJson() const
{
    Json::Value ret;
    if(getUserId())
    {
        ret["user_id"]=getValueOfUserId();
    }
    else
    {
        ret["user_id"]=Json::Value();
    }
    if(getUsername())
    {
        ret["username"]=getValueOfUsername();
    }
    else
    {
        ret["username"]=Json::Value();
    }
    if(getHashPassword())
    {
        ret["hash_password"]=getValueOfHashPassword();
    }
    else
    {
        ret["hash_password"]=Json::Value();
    }
    if(getSalt())
    {
        ret["salt"]=getValueOfSalt();
    }
    else
    {
        ret["salt"]=Json::Value();
    }
    if(getIsAdmin())
    {
        ret["is_admin"]=getValueOfIsAdmin();
    }
    else
    {
        ret["is_admin"]=Json::Value();
    }
    if(getCreatedAt())
    {
        ret["created_at"]=(Json::Int64)getValueOfCreatedAt();
    }
    else
    {
        ret["created_at"]=Json::Value();
    }
    return ret;
}

Json::Value Users::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 6)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getUserId())
            {
                ret[pMasqueradingVector[0]]=getValueOfUserId();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getUsername())
            {
                ret[pMasqueradingVector[1]]=getValueOfUsername();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getHashPassword())
            {
                ret[pMasqueradingVector[2]]=getValueOfHashPassword();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getSalt())
            {
                ret[pMasqueradingVector[3]]=getValueOfSalt();
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[4].empty())
        {
            if(getIsAdmin())
            {
                ret[pMasqueradingVector[4]]=getValueOfIsAdmin();
            }
            else
            {
                ret[pMasqueradingVector[4]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[5].empty())
        {
            if(getCreatedAt())
            {
                ret[pMasqueradingVector[5]]=(Json::Int64)getValueOfCreatedAt();
            }
            else
            {
                ret[pMasqueradingVector[5]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getUserId())
    {
        ret["user_id"]=getValueOfUserId();
    }
    else
    {
        ret["user_id"]=Json::Value();
    }
    if(getUsername())
    {
        ret["username"]=getValueOfUsername();
    }
    else
    {
        ret["username"]=Json::Value();
    }
    if(getHashPassword())
    {
        ret["hash_password"]=getValueOfHashPassword();
    }
    else
    {
        ret["hash_password"]=Json::Value();
    }
    if(getSalt())
    {
        ret["salt"]=getValueOfSalt();
    }
    else
    {
        ret["salt"]=Json::Value();
    }
    if(getIsAdmin())
    {
        ret["is_admin"]=getValueOfIsAdmin();
    }
    else
    {
        ret["is_admin"]=Json::Value();
    }
    if(getCreatedAt())
    {
        ret["created_at"]=(Json::Int64)getValueOfCreatedAt();
    }
    else
    {
        ret["created_at"]=Json::Value();
    }
    return ret;
}

bool Users::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("user_id"))
    {
        if(!validJsonOfField(0, "user_id", pJson["user_id"], err, true))
            return false;
    }
    if(pJson.isMember("username"))
    {
        if(!validJsonOfField(1, "username", pJson["username"], err, true))
            return false;
    }
    else
    {
        err="The username column cannot be null";
        return false;
    }
    if(pJson.isMember("hash_password"))
    {
        if(!validJsonOfField(2, "hash_password", pJson["hash_password"], err, true))
            return false;
    }
    else
    {
        err="The hash_password column cannot be null";
        return false;
    }
    if(pJson.isMember("salt"))
    {
        if(!validJsonOfField(3, "salt", pJson["salt"], err, true))
            return false;
    }
    if(pJson.isMember("is_admin"))
    {
        if(!validJsonOfField(4, "is_admin", pJson["is_admin"], err, true))
            return false;
    }
    if(pJson.isMember("created_at"))
    {
        if(!validJsonOfField(5, "created_at", pJson["created_at"], err, true))
            return false;
    }
    return true;
}
bool Users::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                               const std::vector<std::string> &pMasqueradingVector,
                                               std::string &err)
{
    if(pMasqueradingVector.size() != 6)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty())
      {
          if(pJson.isMember(pMasqueradingVector[0]))
          {
              if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[1].empty())
      {
          if(pJson.isMember(pMasqueradingVector[1]))
          {
              if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[1] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[2].empty())
      {
          if(pJson.isMember(pMasqueradingVector[2]))
          {
              if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[2] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[3].empty())
      {
          if(pJson.isMember(pMasqueradingVector[3]))
          {
              if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[4].empty())
      {
          if(pJson.isMember(pMasqueradingVector[4]))
          {
              if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[5].empty())
      {
          if(pJson.isMember(pMasqueradingVector[5]))
          {
              if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, true))
                  return false;
          }
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Users::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("user_id"))
    {
        if(!validJsonOfField(0, "user_id", pJson["user_id"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("username"))
    {
        if(!validJsonOfField(1, "username", pJson["username"], err, false))
            return false;
    }
    if(pJson.isMember("hash_password"))
    {
        if(!validJsonOfField(2, "hash_password", pJson["hash_password"], err, false))
            return false;
    }
    if(pJson.isMember("salt"))
    {
        if(!validJsonOfField(3, "salt", pJson["salt"], err, false))
            return false;
    }
    if(pJson.isMember("is_admin"))
    {
        if(!validJsonOfField(4, "is_admin", pJson["is_admin"], err, false))
            return false;
    }
    if(pJson.isMember("created_at"))
    {
        if(!validJsonOfField(5, "created_at", pJson["created_at"], err, false))
            return false;
    }
    return true;
}
bool Users::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                             const std::vector<std::string> &pMasqueradingVector,
                                             std::string &err)
{
    if(pMasqueradingVector.size() != 6)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
      {
          if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
              return false;
      }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
      if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
      {
          if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
              return false;
      }
      if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
      {
          if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
              return false;
      }
      if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
      {
          if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
              return false;
      }
      if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
      {
          if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, false))
              return false;
      }
      if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
      {
          if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, false))
              return false;
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Users::validJsonOfField(size_t index,
                             const std::string &fieldName,
                             const Json::Value &pJson,
                             std::string &err,
                             bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(isForCreation)
            {
                err="The automatic primary key cannot be set";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            if(pJson.isString() && std::strlen(pJson.asCString()) > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;
            }

            break;
        case 2:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            if(pJson.isString() && std::strlen(pJson.asCString()) > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;
            }

            break;
        case 3:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            if(pJson.isString() && std::strlen(pJson.asCString()) > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;
            }

            break;
        case 4:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isBool())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 5:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        default:
            err="Internal error in the server";
            return false;
    }
    return true;
}
std::vector<Messages> Users::getMessages(const DbClientPtr &clientPtr) const {
    static const std::string sql = "select * from messages where user_id = $1";
    Result r(nullptr);
    {
        auto binder = *clientPtr << sql;
        binder << *userId_ << Mode::Blocking >>
            [&r](const Result &result) { r = result; };
        binder.exec();
    }
    std::vector<Messages> ret;
    ret.reserve(r.size());
    for (auto const &row : r)
    {
        ret.emplace_back(Messages(row));
    }
    return ret;
}

void Users::getMessages(const DbClientPtr &clientPtr,
                        const std::function<void(std::vector<Messages>)> &rcb,
                        const ExceptionCallback &ecb) const
{
    static const std::string sql = "select * from messages where user_id = $1";
    *clientPtr << sql
               << *userId_
               >> [rcb = std::move(rcb)](const Result &r){
                   std::vector<Messages> ret;
                   ret.reserve(r.size());
                   for (auto const &row : r)
                   {
                       ret.emplace_back(Messages(row));
                   }
                   rcb(ret);
               }
               >> ecb;
}
std::vector<Rooms> Users::getRoom(const DbClientPtr &clientPtr) const {
    static const std::string sql = "select * from rooms where owner_id = $1";
    Result r(nullptr);
    {
        auto binder = *clientPtr << sql;
        binder << *userId_ << Mode::Blocking >>
            [&r](const Result &result) { r = result; };
        binder.exec();
    }
    std::vector<Rooms> ret;
    ret.reserve(r.size());
    for (auto const &row : r)
    {
        ret.emplace_back(Rooms(row));
    }
    return ret;
}

void Users::getRoom(const DbClientPtr &clientPtr,
                    const std::function<void(std::vector<Rooms>)> &rcb,
                    const ExceptionCallback &ecb) const
{
    static const std::string sql = "select * from rooms where owner_id = $1";
    *clientPtr << sql
               << *userId_
               >> [rcb = std::move(rcb)](const Result &r){
                   std::vector<Rooms> ret;
                   ret.reserve(r.size());
                   for (auto const &row : r)
                   {
                       ret.emplace_back(Rooms(row));
                   }
                   rcb(ret);
               }
               >> ecb;
}
std::vector<UserRoomRoles> Users::getRoles(const DbClientPtr &clientPtr) const {
    static const std::string sql = "select * from user_room_roles where user_id = $1";
    Result r(nullptr);
    {
        auto binder = *clientPtr << sql;
        binder << *userId_ << Mode::Blocking >>
            [&r](const Result &result) { r = result; };
        binder.exec();
    }
    std::vector<UserRoomRoles> ret;
    ret.reserve(r.size());
    for (auto const &row : r)
    {
        ret.emplace_back(UserRoomRoles(row));
    }
    return ret;
}

void Users::getRoles(const DbClientPtr &clientPtr,
                     const std::function<void(std::vector<UserRoomRoles>)> &rcb,
                     const ExceptionCallback &ecb) const
{
    static const std::string sql = "select * from user_room_roles where user_id = $1";
    *clientPtr << sql
               << *userId_
               >> [rcb = std::move(rcb)](const Result &r){
                   std::vector<UserRoomRoles> ret;
                   ret.reserve(r.size());
                   for (auto const &row : r)
                   {
                       ret.emplace_back(UserRoomRoles(row));
                   }
                   rcb(ret);
               }
               >> ecb;
}
