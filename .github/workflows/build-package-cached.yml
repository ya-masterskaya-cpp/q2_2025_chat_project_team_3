name: build-package-cached
on:
  push:
    branches:
      - main

jobs:
  job:
    name: ${{ matrix.os }}-${{ github.workflow }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-24.04, macos-13, windows-2025]
    env:
      _VCPKG_: ${{ github.workspace }}/vcpkg
      VCPKG_DEFAULT_BINARY_CACHE: ${{ github.workspace }}/vcpkg/bincache

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true

      - name: "Create directory '${{ env.VCPKG_DEFAULT_BINARY_CACHE }}'"
        run: mkdir -p $VCPKG_DEFAULT_BINARY_CACHE
        shell: bash

      - uses: lukka/get-cmake@latest
        with:
          cmakeVersion: 4.0.2
          ninjaVersion: 1.12.1

      # Restore vcpkg binary cache
      - name: Restore vcpkg cache
        id: vcpkg-cache
        uses: actions/cache/restore@v4
        with:
          path: ${{ env.VCPKG_DEFAULT_BINARY_CACHE }}
          key: ${{ runner.os }}-vcpkg-${{ hashFiles('.git/modules/vcpkg/HEAD') }}
          restore-keys: ${{ runner.os }}-vcpkg-

      # On Windows runners, let's ensure to have the Developer Command Prompt environment setup correctly.
      # As used here the Developer Command Prompt created is targeting x64 and using the default the Windows SDK.
      - uses: ilammy/msvc-dev-cmd@v1

      - name: Get required deps on Ubntu
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y bison flex autoconf libltdl-dev python3-jinja2 libx11-dev libxft-dev libxext-dev libxi-dev libxtst-dev libxrandr-dev

      - name: Configure CMake
        run: |
          cmake --preset ninja-multi-vcpkg

      # Save vcpkg cache (always runs, even if later steps fail)
      - name: Save vcpkg cache
        if: always() && steps.vcpkg-cache.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          path: ${{ env.VCPKG_DEFAULT_BINARY_CACHE }}
          key: ${{ runner.os }}-vcpkg-${{ hashFiles('.git/modules/vcpkg/HEAD') }}

      - name: Build (Release configuration)
        run: |
          cmake --build --preset ninja-vcpkg-release

      - name: Package (Release configuration)
        run: |
          cmake --build --preset ninja-vcpkg-release --target package

      - name: Create AppImage on Linux
        if: runner.os == 'Linux'
        run: |
          cd build
          cmake --install . --config Release --component client --prefix ./AppDir/usr/bin

          mkdir -p AppDir/usr/share/applications
          cat > AppDir/usr/share/applications/client_app.desktop << EOF
          [Desktop Entry]
          Type=Application
          Name=Slightly Pretty Chat
          Exec=client_app
          Categories=Utility;
          Icon=appname
          EOF

          mkdir -p AppDir/usr/share/icons/hicolor/scalable/apps
          touch AppDir/usr/share/icons/hicolor/scalable/apps/appname.svg

          wget https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-x86_64.AppImage
          chmod +x linuxdeploy-x86_64.AppImage

          ./linuxdeploy-x86_64.AppImage --appimage-extract
          rm linuxdeploy-x86_64.AppImage
          ./squashfs-root/AppRun --appdir AppDir --output appimage

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-packages-${{ matrix.os }}
          path: |
            build/*.dmg
            build/*.zip
            build/*.tar.gz
            build/*.AppImage
